-- CREATE DB

CREATE TABLE "films"
(
    "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name"        varchar,
    "description" text,
    "duration"    int,
    "price"       float
);

CREATE TABLE "halls"
(
    "id"    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name"  varchar,
    "seats" int
);

CREATE TABLE "halls_films"
(
    "film_id" int,
    "hall_id" int
);

CREATE TABLE "orders"
(
    "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "client_id"  int,
    "film_id"    int,
    "price"      float,
    "hall_id"    int,
    "seat"       int,
    "session_id" int,
    "date"       date
);

CREATE INDEX orders_film_id ON orders USING btree (film_id);
CREATE INDEX orders_date ON orders USING btree (date);

CREATE TABLE "seats"
(
    "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "place"      int,
    "row"        int,
    "hall_id"    int,
    "session_id" int,
    "is_free"    boolean
);

CREATE TABLE "client"
(
    "id"    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name"  varchar,
    "email" varchar
);

CREATE TABLE "sessions"
(
    "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "time_start"  timestamp,
    "time_finish" timestamp,
    "coefficient" float
);

ALTER TABLE "halls_films"
    ADD FOREIGN KEY ("film_id") REFERENCES "films" ("id");

ALTER TABLE "halls_films"
    ADD FOREIGN KEY ("hall_id") REFERENCES "halls" ("id");

ALTER TABLE "orders"
    ADD FOREIGN KEY ("client_id") REFERENCES "client" ("id");

ALTER TABLE "orders"
    ADD FOREIGN KEY ("film_id") REFERENCES "films" ("id");

ALTER TABLE "orders"
    ADD FOREIGN KEY ("hall_id") REFERENCES "halls" ("id");

ALTER TABLE "orders"
    ADD FOREIGN KEY ("seat") REFERENCES "seats" ("id");

ALTER TABLE "orders"
    ADD FOREIGN KEY ("session_id") REFERENCES "sessions" ("id");

ALTER TABLE "seats"
    ADD FOREIGN KEY ("hall_id") REFERENCES "halls" ("id");

ALTER TABLE "seats"
    ADD FOREIGN KEY ("session_id") REFERENCES "sessions" ("id");

-- FILL DB

INSERT INTO client (name, email)
VALUES ('Jason Smith', 'ex@gmail.com');
INSERT INTO client (name, email)
VALUES ('Lee Bruce', 'lee@gmail.com');
INSERT INTO client (name, email)
VALUES ('Jaky Chan', 'jacky@gmail.com');
INSERT INTO client (name, email)
VALUES ('Brad Pitt', 'brad@gmail.com');


INSERT INTO films (name, description, duration, price)
VALUES ('Любовь и голуби', 'Фильм о любви', 122, 500);
INSERT INTO films (name, description, duration, price)
VALUES ('Бриллиантовая рука', 'Комедия', 180, 600);
INSERT INTO films (name, description, duration, price)
VALUES ('Собачье сердце', 'Драма', 100, 500);


INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-23 00:07:30.000000', '2022-11-23 00:09:30.000000', '1.75');
INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-29 00:07:30.000000', '2022-11-29 00:09:30.000000', '1.50');
INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-28 00:07:30.000000', '2022-11-28 00:09:30.000000', '1.1');
INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-25 00:07:30.000000', '2022-11-25 00:09:30.000000', '1.75');

INSERT INTO halls (name, seats)
VALUES ('Зал 1', 77);
INSERT INTO halls (name, seats)
VALUES ('Зал 2', 77);
INSERT INTO halls (name, seats)
VALUES ('Зал 3', 77);
INSERT INTO halls (name, seats)
VALUES ('Зал 4', 77);
INSERT INTO halls (name, seats)
VALUES ('Зал 5', 77);


INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-23 00:07:30.000000', '2022-11-23 00:09:30.000000', '1.75');
INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-29 00:07:30.000000', '2022-11-29 00:09:30.000000', '1.50');
INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-28 00:07:30.000000', '2022-11-28 00:09:30.000000', '1.1');
INSERT INTO sessions (time_start, time_finish, coefficient)
VALUES ('2022-11-25 00:07:30.000000', '2022-11-25 00:09:30.000000', '1.75');


INSERT INTO halls_films (film_id, hall_id)
VALUES (1, 1);
INSERT INTO halls_films (film_id, hall_id)
VALUES (2, 1);
INSERT INTO halls_films (film_id, hall_id)
VALUES (3, 1);
INSERT INTO halls_films (film_id, hall_id)
VALUES (1, 2);
INSERT INTO halls_films (film_id, hall_id)
VALUES (2, 2);

DO
$$
    DECLARE
        count_sessions integer := (SELECT COUNT(*) FROM sessions);
        count_halls integer := (SELECT COUNT(*) FROM halls);
        rows integer := 7;
        places integer := 11;

    BEGIN
        FOR i IN 1..count_halls
            LOOP
                FOR s in 1..count_sessions
                    LOOP
                        FOR r IN 1..rows
                            LOOP
                                FOR p IN 1..places
                                    LOOP
                                        INSERT INTO seats (place, row, hall_id, session_id, is_free)
                                        VALUES (p, r, i, s, true);
                                    END LOOP;
                            END LOOP;
                    END LOOP;
            END LOOP;
    END;
$$;


CREATE OR REPLACE FUNCTION generate_int_to_range(low integer, high integer) RETURNS integer AS
$$
BEGIN
    return floor(random() * (high - low + 1) + low);
END;
$$ language plpgsql;


CREATE OR REPLACE FUNCTION generate_timestamp() RETURNS timestamp AS
$$
BEGIN
    IF random() < 0.5 THEN
        RETURN now() - random() * (interval '181 days');
    END IF;
    RETURN now() + random() * (interval '184 days');
END
$$ language plpgsql;

DO
$$
    DECLARE
        min_ticket_price integer := 250;
        max_ticket_price integer := 300;
        count_sessions integer := (SELECT COUNT(*) FROM sessions);
        count_clients integer := (SELECT COUNT(*) FROM client);
        count_seats integer := (SELECT COUNT(*) FROM seats);
        count_films integer := (SELECT COUNT(*) FROM films);
        count_halls integer := (SELECT COUNT(*) FROM halls);
        session integer;
        place integer;
        count_loop integer := 0;

    BEGIN
        WHILE count_loop < 100000
            LOOP
                session := generate_int_to_range(1, count_sessions);
                place := generate_int_to_range(1, count_seats);

                IF (SELECT COUNT(*) FROM orders WHERE orders.session_id = session AND orders.seat = place)  != 0
                THEN CONTINUE;
                END IF;

                INSERT INTO orders (client_id, film_id, price, hall_id, seat, session_id, date)
                VALUES (generate_int_to_range(1, count_clients), generate_int_to_range(1, count_films),
                        generate_int_to_range(min_ticket_price, max_ticket_price), generate_int_to_range(1,count_halls), place,
                        session, generate_timestamp()::date);

                count_loop := count_loop + 1;
            END LOOP;
    END;
$$;

-- QUERIES
SELECT * FROM films WHERE price > 300;
CREATE INDEX prices on films USING btree (price);

SELECT * FROM sessions WHERE coefficient = 1.75 AND time_start = '2022-11-23 00:07:30.000000';
CREATE INDEX session_coefficient_time ON sessions USING btree (coefficient, time_start);

SELECT * FROM orders WHERE client_id = 4 ;
CREATE INDEX orders_client_id ON orders USING btree (client_id);

-- QUERIES HIGH LEVEL
SELECT SUM(orders.price)
FROM orders
         join films f on orders.film_id = f.id
WHERE f.duration > 130
GROUP BY f.duration;

CREATE INDEX film_durations ON films USING btree (duration);

SELECT * FROM films
                  JOIN orders o ON films.id = o.film_id
                  JOIN halls h ON o.hall_id = h.id
WHERE o.film_id = 2;

CREATE INDEX order_film_id ON orders USING btree (film_id);

SELECT orders.hall_id FROM orders
                               join halls h on orders.hall_id = h.id
                               join films f on orders.film_id = f.id
WHERE orders.film_id > 2
GROUP BY orders.hall_id , orders.film_id;

CREATE INDEX orders_index ON orders USING btree (hall_id, film_id);