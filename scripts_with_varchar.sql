-- DDL

CREATE DATABASE `cinema`;

\c `cinema`;

-- Фильмы
DROP TABLE IF EXISTS public.movie;
CREATE TABLE public.movie (
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	title character varying NOT NULL,
	status bool NOT NULL DEFAULT true,
	CONSTRAINT movie_pk PRIMARY KEY (id)
);

-- Типы полей
-- Поле code для облегчения жизни на бэкенде/фронтенде
DROP TABLE IF EXISTS public.field_type;
CREATE TABLE public.field_type (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	code varchar NOT NULL,
	title varchar NOT NULL,
	status bool NOT NULL DEFAULT true,
	CONSTRAINT field_type_pk PRIMARY KEY (id)
);

ALTER TABLE public.field_type ADD CONSTRAINT field_type_unq UNIQUE (code);

-- Группа атрибутов
DROP TABLE IF EXISTS public.attribute_group;
CREATE TABLE public.attribute_group (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	title varchar NOT NULL,
	status bool NOT NULL DEFAULT true,
	CONSTRAINT attribute_group_pk PRIMARY KEY (id)
);

-- Атрибуты
DROP TABLE IF EXISTS public.attribute;
CREATE TABLE public.attribute (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	title varchar NOT NULL,
	field_type_id int4 NOT NULL,
  	attribute_group_id int4 NULL,
	status bool NOT NULL DEFAULT true,
	CONSTRAINT attribute_pk PRIMARY KEY (id)
);

ALTER TABLE public."attribute" ADD CONSTRAINT attribute_fk FOREIGN KEY (field_type_id) REFERENCES public.field_type(id) ON DELETE RESTRICT ON UPDATE CASCADE;
ALTER TABLE public."attribute" ADD CONSTRAINT attribute_group_fk FOREIGN KEY (attribute_group_id) REFERENCES public.attribute_group(id) ON DELETE SET NULL ON UPDATE CASCADE;

-- Значения атрибутов
DROP TABLE IF EXISTS public.movie_attribute_value;
CREATE TABLE public.movie_attribute_value (
	movie_id int4 NOT NULL,
	attribute_id int4 NOT NULL,
	value text NOT NULL,
	CONSTRAINT movie_attribute_value_pk PRIMARY KEY (movie_id, attribute_id)
);


-- DML

INSERT INTO public.movie
	(title, status)
VALUES
	('Терминатор 2', true),
	('Хищник', true),
	('Коммандо', true),
	('Вспомнить все', true),
	('Детсадовский полицейский', true),
	('Правдивая ложь', true);


INSERT INTO public.field_type
	(code, title, status)
VALUES
	('FIELD_DATE', 'Дата', true),
	('FIELD_INT', 'Целое', true),
	('FIELD_STRING', 'Строка', true),
	('FIELD_BOOL', 'Логическое', true);


INSERT INTO public."attribute_group"
	(title, status)
VALUES
	('Служебные даты', true),
	('Важные даты', true),
	('Премия', true);


INSERT INTO public."attribute"
	(title, field_type_id, attribute_group_id, status)
VALUES
	('Начало продажи билетов', 1, 1, true),
	('Премьера в РФ', 1, 2, true),
	('Ника', 4, 3, true),
	('Оскар', 4, 3, true),
	('Рецензии', 3, null, true),
	('Проверка ленты', 1, 1, true),
	('Предпросмотр', 1, 1, true);


INSERT INTO public.movie_attribute_value
	(movie_id, attribute_id, value)
VALUES
	(1, 2, current_date),
	(1, 1, (select current_date + 20 days)::varchar),
	(1, 4, 'true'),
	(2, 2, current_date),
	(2, 1, '2023-04-03'),
	(2, 3, 'true'),
	(3, 2, current_date),
	(3, 1, (select current_date + 20 days)::varchar),
	(3, 4, 'true'),
	(1, 6, current_date),
	(1, 7, current_date);


-- View

-- 1. View сборки служебных данных в форме:
--		фильм, задачи актуальные на сегодня, задачи актуальные через 20 дней

-- 1.1 Вариант с перечислением задач в качестве строк
CREATE VIEW movie_task_list AS 
	SELECT 
		m.title,
		CASE 
			WHEN mav.value = current_date::varchar
			THEN a.title
		END AS current_day_tasks,
		CASE 
			WHEN mav.value = (select current_date + 20 days)::varchar
			THEN a.title
		END AS next_week_tasks	
	FROM movie_attribute_value mav
	INNER JOIN movie m
		ON m.id = mav.movie_id
		AND m.status = true
	INNER JOIN "attribute" a
		ON a.id = mav.attribute_id
		AND a.status = true
		AND a.attribute_group_id = 1
	WHERE mav.value = current_date::varchar
		OR mav.value = (select current_date + 20 days)::varchar
	ORDER BY
		m.title,
		a.title
	;

-- 1.2 Вариант с конкатенацией
CREATE VIEW movie_task_list_with_concat AS 
	SELECT 
		m.title AS movie_title,
		string_agg(
			CASE 
				WHEN mav.value = current_date::varchar
				THEN a.title
			END
		, ', ') AS current_day_tasks,
		string_agg(
			CASE 
				WHEN mav.value = (select current_date + 20 days)::varchar
				THEN a.title
			END
		, ', ') AS next_week_tasks	
	FROM movie_attribute_value mav
	INNER JOIN movie m
		ON m.id = mav.movie_id
		AND m.status = true
	INNER JOIN "attribute" a
		ON a.id = mav.attribute_id
		AND a.status = true
		AND a.attribute_group_id = 1
	WHERE mav.value = current_date::varchar
		OR mav.value = (select current_date + 20 days)::varchar
	GROUP BY
		m.title
	ORDER BY
		m.title
	;


-- 2. View сборки данных для маркетинга в форме:
-- 		фильм, тип атрибута, атрибут, значение (значение выводим как текст)
CREATE VIEW movie_attribute_list AS 
	SELECT 
		m.title AS movie_title,
		ft.title AS field_type,
		a.title AS attribute_title,
		mav.value AS value
	FROM movie_attribute_value mav
	INNER JOIN movie m
		ON m.id = mav.movie_id
		AND m.status = true
	INNER JOIN "attribute" a
		ON a.id = mav.attribute_id
		AND a.status = true
	INNER JOIN field_type ft 
		ON ft.id = a.field_type_id 
	ORDER BY
		m.title,
		a.title
	;