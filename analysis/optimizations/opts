1. Устанавливаем параметр random_page_cost=1.1, рекомендованный при работе базы на SSD диске.
2. По анализу запросов :
 Наиболее медленные запросы:
 3 наиболее прибыльных фильма Execution Time: 763.224 ms
 схема зала Execution Time: 559.862 ms
 мин/макс цены за билет в расписании Execution Time: 514.384 ms
 проданные за неделю билеты Execution Time: 420.542 ms

Видим частый поиск в билетах по id расписания :
 - в запросе на 3 наиболее прибыльных фильма
         Merge Join  (cost=137150.57..137788.69 rows=1860 width=40) (actual time=722.011..725.352 rows=1860 loops=1)
         "                          Merge Cond: (sch.id = ""Ticket"".""Schedule"")"
 - в запросе схемы зала
        Hash Join  (cost=46.74..126206.24 rows=33602 width=4) (actual time=6.591..485.804 rows=26929 loops=3)
        "                    Hash Cond: (t.""Schedule"" = sch.id)"
 - в запросе мин/макс цены за билет в расписании
        Hash Join  (cost=55.89..126215.39 rows=6720 width=2) (actual time=15.843..492.466 rows=5293 loops=3)
          "                    Hash Cond: (t.""Schedule"" = sch.id)"

 Создаем индекс на колонку расписания в билетах

Видим частый поиск в расписании по дате :

 - в запросе схемы зала
        Seq Scan on ""Schedule"" sch  (cost=0.00..46.55 rows=15 width=4) (actual time=6.303..6.375 rows=15 loops=3)"
         "                                Filter: ((""Time"" = '16:00:00'::time without time zone) AND (""Date"" = CURRENT_DATE))"

 - в запросе мин/макс цены за билет в расписании
        Seq Scan on ""Schedule"" sch  (cost=0.00..55.85 rows=3 width=4) (actual time=15.161..15.272 rows=3 loops=3)"
        "                                Filter: ((""Time"" = '16:00:00'::time without time zone) AND (""Movie"" = 2) AND (""Date"" = (CURRENT_DATE - 10)))"

 - в запросе фильмы сегодня
        Seq Scan on ""Schedule"" sch  (cost=0.00..41.90 rows=60 width=4) (actual time=0.098..0.345 rows=60 loops=1)"
        "              Filter: (""Date"" = CURRENT_DATE)"

 - в запросе расписание сегодня
        Seq Scan on ""Schedule"" sch  (cost=0.00..41.90 rows=60 width=4) (actual time=0.094..0.201 rows=60 loops=1)"
        "              Filter: (""Date"" = CURRENT_DATE)"

  Создаем индекс на колонку даты в расписании


 Смотрим улучшения:
  3 наиболее прибыльных фильма Execution Time: 790.402 ms   - не улучшилось
   схема зала Execution Time: 315.706 ms   - улучшилось не значительно ~ на 200 ms
   мин/макс цены за билет в расписании Execution Time:  27.711 ms улучшилось значительно, почти в 20 раз

Для запроса проданных билетов за неделю пробуем добавить индекс по колонке время:
   итог 772.087 ms   - ухудшение почти в два раза, удаляем индекс


3. Получаем, что три запроса требуют дальнейшего анализа и оптимизации
    3 наиболее прибыльных фильма
    проданные билеты за неделю
    схема зала

    Для наиболее прибыльных фильмов и проданных билетов есть мысль вынести аналитику в отдельные таблицы,
    т.к. скорее всего по бизнес-логике эта информация может требоваться регулярно

4. Создаём таблицу сборы по фильмам, где агрегируем информацию с привязкой по завершённым сеансам(расписанию)
вешаем триггеры на изменения в таблице билетов. Переделываем запрос.
   Итог 3 наиболее прибыльных фильма Execution Time: 1.419 ms  - улучшение ~ в 400 раз

5. Создаём таблицу по продажам билетов, где агрегируем сумму продаж за 1 день. Делаем индекс в таблице по дате,
 т.к. явно будем делать выборки именно по датам. Вешаем триггеры на изменения в таблице билетов. Переделываем запрос.

  Итог проданные за неделю билеты  Execution Time: 0.047 ms - улучшение ~ в 9000 раз

6. Анализ запроса схемы зала показывает, что возвращается очень большое кол-во строк
 Sort  (cost=65276.67..65478.28 rows=80645 width=4) (actual time=300.012..309.346 rows=80591 loops=1)
 Некорректно заполненные изначально данные привели к тому, что на одно и то же место на одно и то же расписание
  регистрируется очень большое число билетов, чего в реальности быть не должно.
  Есть подозрение, что корректное заполнение исправит ситуацию и запрос будет выполняться быстрее.



