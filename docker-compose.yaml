# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: otus/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
    volumes:
       - ./code:/data/otus.local
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  php:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: otus/php # имя будущего образа
    container_name: php # имя контейнера после запуска
    depends_on:
      - db
      - memcached
      - redis
    volumes:
       - ./code:/data/otus.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  # контейнер с MySQL
  db:
    image: mysql:5.7.22
    container_name: db
    ports:
      - "3306:3306"
    # описываем, какую БД мы создаём
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./dbdata:/var/lib/mysql  
    networks:
      - app-network

  workspace:
    image: php:7.4
    container_name: console
    volumes:
      - ./code:/data/otus.local
    networks:
      - app-network

  memcached:
    image: 'bitnami/memcached:latest'
    container_name: memcached
    ports:
      - '11211:11211'
    networks:
      - app-network

  redis:
    image: redis:6.2-alpine
    restart: always
    container_name: redis
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - redis:/data
    networks:
      - app-network

volumes:
  redis:
    driver: local
  db:
    driver: local

#Docker Networks
networks:
  app-network:
    driver: bridge