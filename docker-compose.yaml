# Версия синтаксиса
version: '3'

# В этом блоке мы описываем контейнеры, которые будут запускаться
services:

  # Контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx
    container_name: webserver
    # Проброс портов
    ports:
      - "80:80"
    volumes:
       - ./code:/data/mysite.local
    networks:
      - app-network

  # Контейнер Redis
  redis:
    image: redis:6.2-alpine
    container_name: app_redis
    restart: always
    ports:
      - "${REDIS_OUTER_PORT}:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass cf62bf4c11c2dabe92f4114ec522051d
    volumes:
      - ./cache:/data/mysite.local
    networks:
      - app-network

  # Контейнер с PHP-FPM, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php # Имя будущего образа
    container_name: app1 # Имя контейнера после запуска
    volumes:
       - ./code:/data/mysite.local
    # Мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  # Контейнер с MySQL
  # Строим на базе стандартного образа
  db:
    image: mysql:5.7.22
    container_name: db
    ports:
      - "13306:3306"
    # Описываем, какую БД мы создаём
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./dbdata:/var/lib/mysql  
    networks:
      - app-network

  # Контейнер Memcached
  memcached:
    container_name: memcached
    image: memcached:latest
    ports:
        - "11311:11211"
    networks:
      - app-network

  workspace:
    image: php:7.4
    container_name: console
    volumes:
      - ./code:/data/mysite.local
    networks:
      - app-network

# Volumes
volumes:
  cache:
    driver: local

# Docker Networks
networks:
  app-network:
    driver: bridge