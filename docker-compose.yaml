# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  nginx:
    build:
      context: "./nginx/${APP_ENV}"
      dockerfile: Dockerfile
    image: "${ENAME}/nginx"
    container_name: "webserver_${ENAME}"
    depends_on:
      - php
    # проброс портов
    ports:
      - "80:80"
    volumes:
      - ./code:/code
    networks:
      - internal


  #Контейнер с PHP-FPM, назовём его app
  php:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: "./fpm/${APP_ENV}"
      dockerfile: Dockerfile
    image: "${ENAME}/php" # имя будущего образа
    container_name: "php_${ENAME}" # имя контейнера после запуска
    depends_on:
      - db
    volumes:
      - ./code:/code
      - "./fpm/${APP_ENV}/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini"
      - "./fpm/${APP_ENV}/php.ini:/usr/local/etc/php/conf.d/php.ini"
    environment:
      XDEBUG_CONFIG: "remote_host=${REMOTE_HOST} remote_enable=1 "
      PHP_IDE_CONFIG: "serverName=${SERVER_NAME}"
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - internal

  db:
    image: postgres:13.3
    container_name: "db_${ENAME}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"
      # You should definitely change the password in production
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
      - ./dbdata:/var/lib/postgresql/data
      - ./code/sql:/sql
    networks:
      - internal
  workspace:
    build:
      context: "./console/${APP_ENV}"
      dockerfile: Dockerfile
    container_name: "console_${ENAME}"
    image: "${ENAME}/php-cli"
    volumes:
      - ./code:/code
      - "./console/${APP_ENV}/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini"
      - "./console/${APP_ENV}/php.ini:/usr/local/etc/php/conf.d/php.ini"
    depends_on:
      - db
    environment:
      XDEBUG_CONFIG: "remote_host=${REMOTE_HOST} remote_enable=1"
      PHP_IDE_CONFIG: "serverName=${SERVER_NAME}"
    networks:
      - internal

  nodejs:
    build:
      context: ./nodejs
      dockerfile: Dockerfile
    container_name: "nodejs_${ENAME}"
    image: "${ENAME}/nodejs"
    volumes:
      - ./code:/code
    networks:
      - internal

#Docker Networks
networks:
  internal:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK}




